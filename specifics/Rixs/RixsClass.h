//=============================================================================
//
// file :         RixsClass.h
//
// description :  Include for the RixsClass root class.
//                This class is the singleton class for
//                the Rixs device class.
//                It contains all properties and methods which the 
//                Rixs requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _RIXSCLASS_H
#define _RIXSCLASS_H

#ifdef WIN32
#include <tango.h>
#endif

#include <Rixs.h>

#ifndef WIN32
#include <tango.h>
#endif

namespace Rixs_ns
{//=====================================
//	Define classes for attributes
//=====================================
class clusterCentroidYAttrib: public Tango::SpectrumAttr
{
public:
	clusterCentroidYAttrib():SpectrumAttr("clusterCentroidY", Tango::DEV_DOUBLE, Tango::READ, 1000000) {};
	~clusterCentroidYAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_clusterCentroidY(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_clusterCentroidY_allowed(ty);}
};

class clusterCentroidXAttrib: public Tango::SpectrumAttr
{
public:
	clusterCentroidXAttrib():SpectrumAttr("clusterCentroidX", Tango::DEV_DOUBLE, Tango::READ, 1000000) {};
	~clusterCentroidXAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_clusterCentroidX(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_clusterCentroidX_allowed(ty);}
};

class clusterSumAttrib: public Tango::SpectrumAttr
{
public:
	clusterSumAttrib():SpectrumAttr("clusterSum", Tango::DEV_LONG, Tango::READ, 1000000) {};
	~clusterSumAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_clusterSum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_clusterSum_allowed(ty);}
};

class clusterAreaAttrib: public Tango::SpectrumAttr
{
public:
	clusterAreaAttrib():SpectrumAttr("clusterArea", Tango::DEV_LONG, Tango::READ, 1000000) {};
	~clusterAreaAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_clusterArea(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_clusterArea_allowed(ty);}
};

class clusterCounterAttrib: public Tango::SpectrumAttr
{
public:
	clusterCounterAttrib():SpectrumAttr("clusterCounter", Tango::DEV_LONG, Tango::READ, 100000) {};
	~clusterCounterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_clusterCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_clusterCounter_allowed(ty);}
};

class operationsListAttrib: public Tango::SpectrumAttr
{
public:
	operationsListAttrib():SpectrumAttr("operationsList", Tango::DEV_STRING, Tango::READ, 1024) {};
	~operationsListAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_operationsList(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_operationsList_allowed(ty);}
};

class pngFilesPathAttrib: public Tango::Attr
{
public:
	pngFilesPathAttrib():Attr("pngFilesPath", Tango::DEV_STRING, Tango::WRITE) {};
	~pngFilesPathAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_pngFilesPath(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rixs *>(dev))->write_pngFilesPath(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_pngFilesPath_allowed(ty);}
};

class pngFilesEnabledAttrib: public Tango::Attr
{
public:
	pngFilesEnabledAttrib():Attr("pngFilesEnabled", Tango::DEV_BOOLEAN, Tango::WRITE) {};
	~pngFilesEnabledAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_pngFilesEnabled(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rixs *>(dev))->write_pngFilesEnabled(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_pngFilesEnabled_allowed(ty);}
};

class drawCentroidEnabledAttrib: public Tango::Attr
{
public:
	drawCentroidEnabledAttrib():Attr("drawCentroidEnabled", Tango::DEV_BOOLEAN, Tango::WRITE) {};
	~drawCentroidEnabledAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_drawCentroidEnabled(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rixs *>(dev))->write_drawCentroidEnabled(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_drawCentroidEnabled_allowed(ty);}
};

class drawClusterEnabledAttrib: public Tango::Attr
{
public:
	drawClusterEnabledAttrib():Attr("drawClusterEnabled", Tango::DEV_BOOLEAN, Tango::WRITE) {};
	~drawClusterEnabledAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_drawClusterEnabled(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rixs *>(dev))->write_drawClusterEnabled(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_drawClusterEnabled_allowed(ty);}
};

class nbClusterValidAttrib: public Tango::Attr
{
public:
	nbClusterValidAttrib():Attr("nbClusterValid", Tango::DEV_LONG, Tango::READ) {};
	~nbClusterValidAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_nbClusterValid(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_nbClusterValid_allowed(ty);}
};

class maxAreaClusterAttrib: public Tango::Attr
{
public:
	maxAreaClusterAttrib():Attr("maxAreaCluster", Tango::DEV_LONG, Tango::WRITE) {};
	~maxAreaClusterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_maxAreaCluster(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rixs *>(dev))->write_maxAreaCluster(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_maxAreaCluster_allowed(ty);}
};

class minAreaClusterAttrib: public Tango::Attr
{
public:
	minAreaClusterAttrib():Attr("minAreaCluster", Tango::DEV_LONG, Tango::WRITE) {};
	~minAreaClusterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_minAreaCluster(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rixs *>(dev))->write_minAreaCluster(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_minAreaCluster_allowed(ty);}
};

class operationValueAttrib: public Tango::Attr
{
public:
	operationValueAttrib():Attr("operationValue", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~operationValueAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_operationValue(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rixs *>(dev))->write_operationValue(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_operationValue_allowed(ty);}
};

class operationTypeAttrib: public Tango::Attr
{
public:
	operationTypeAttrib():Attr("operationType", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~operationTypeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_operationType(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rixs *>(dev))->write_operationType(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_operationType_allowed(ty);}
};

class versionAttrib: public Tango::Attr
{
public:
	versionAttrib():Attr("version", Tango::DEV_STRING, Tango::READ) {};
	~versionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rixs *>(dev))->read_version(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rixs *>(dev))->is_version_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class RemoveOperationCmd : public Tango::Command
{
public:
	RemoveOperationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RemoveOperationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RemoveOperationCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rixs *>(dev))->is_RemoveOperation_allowed(any);}
};



class AddOperationCmd : public Tango::Command
{
public:
	AddOperationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AddOperationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AddOperationCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rixs *>(dev))->is_AddOperation_allowed(any);}
};



//
// The RixsClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	RixsClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static RixsClass *init(const char *);
	static RixsClass *instance();
	~RixsClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	RixsClass(string &);
	static RixsClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Rixs_ns

#endif // _RIXSCLASS_H
